package templates

import(
    "Go_htmx_page/models"
    "fmt"
)

/* Base layout for the editor view */
templ EditorSection(works []models.WorkFrontEnd) {
     <section class="px-0 dark:bg-gray-800 dark:text-gray-900 justify-between w-screen" id="works-section">
      <!-- images outer container -->
      <div class="mx-auto px-0 flex flex-col items-center justify-between w-screen overflow-hidden">
        <div class="-m-1 flex flex-wrap md:-m-2 flex-col items-center w-screen md:gap-1 gap-3" id="gallery">
          <!-- IMAGES HERE BELOW: -->
          for _, work := range works{
            <div class="flex w-full h-[500px] flex-wrap pb-10 object-center relative" id="work-container-{{ .Position }}">
                <img
                alt="gallery"
                class="block w-full h-full object-cover object-center absolute top-0 left-0"
                src={ work.Path }
                />
                <!-- Image text container -->
                <div class="w-full h-full hover:opacity-100 absolute top-0 left-0 flex items-center">
                <div class="bg-black bg-opacity-50 w-full h-full flex flex-col items-baseline">
                <h2 class="text-white md:pl-2 w-full text-left mt-2 font-serif text-xl">{ work.Title }</h2>
                @ButtonsContainer(work)
              </div>
            </div>
          </div>
          }
        </div>
      </div>
    </section>
      if len(works) == 0{
    <section class="px-0 dark:bg-gray-800 dark:text-gray-900 justify-center items-center flex w-screen md:h-3/4 h-5/6 flex-col gap-4">
    <h1 class="text-xl text-slate-700 p-1 rounded-lg font-bold">Insert Your First Work</h1>
    <form
      id="form-container"
      class="flex md:flex-row flex-col justify-center text-left bg-primary h-3/4 w-10/12 gap-4 p-4 rounded-lg"
      hx-post="/editor"
      hx-include="[name='Title'], [name='Position'], [name='Description']"
      hx-encoding="multipart/form-data"
      hx-trigger="submit"
      hx-indicator="#spinner"
    >
      <!-- Title input -->
      <div
        class="flex md:flex-col flex-col justify-end gap-2 items-center bg-primary h-full w-full rounded-md md:h-full flex"
      >
        <div
          class="flex justify-center items-center border border-slate-800 w-full h-1/4 md:h-1/3 md:h-1/5 sm:text-sm md:text-lg rounded-lg dark:text-gray-800 bg-primary text-center shadow shadow-md shadow-slate-800 hover:border-btnAccent"
        >
          <!-- Generate <input> for 'Edit','Insert' or <p> message for 'Delete'-->
          <input
            class="w-full h-full sm:text-sm md:text-lg rounded-lg dark:text-gray-800 bg-primary text-center text-secondary hover:bg-slate-800 hover:shadow-md border-0 focus:border-0 focus:shadow-none focus:ring-btnAccent"
            type="text"
            name="Title"
            id="title"
            placeholder="Title"
            required="true"
            name="Title"
          />
        </div>
        <div
          class="rounded-md md:w-full border border-slate-800 w-full h-5/6 md:h-4/5 align-text-top items-start justify-start bg-primary text-black flex-1 resize-none shadow-md shadow-slate-800 hover:bg-slate-800 border-0"
        >
          <!-- Generate <text area> or <p> with message depending on operation-->
          <textarea
            class="rounded-md md:w-full w-full h-full align-text-top items-start justify-start bg-primary text-secondary border border-1 border-slate-800 resize-none pl-1 shadow shadow-lg shadow-slate-800 hover:bg-slate-800 hover:border-btnAccent focus:shadow-none focus:ring-0 focus:border-btnAccent"
            name="Description"
            placeholder="Enter work description here..."
            required="true"
          >
          </textarea>
        </div>
      </div>
      <!-- /Title Input -->
      <!-- File upload  -->
      <div
        class="flex md:flex-col flex-col justify-start gap-3 md:gap-2 items-center bg-primary h-full w-full rounded-md md:h-full"
      >
        <div
          class="flex justify-center items-center w-full h-1/4 md:h-1/5 sm:text-sm md:text-lg rounded-lg bg-slate-800 shadow-sm shadow-slate-800 border border-slate-900"
        >
          <p class="flex justify-center items-center h-full w-full text-center text-btnPrimaryText font-medium">
            Choose an image file below:
          </p>
        </div>
        <div
          class="flex flex-col gap-3 md:gap-2 rounded-md md:w-full w-full h-3/4 md:h-2/3 align-text-top items-end justify-end text-secondary flex-1"
        >
          <input
            class="text-center items-center justify-center w-full h-4/5 md:h-2/3 flex text-secondary rounded-lg bg-primary pt-2 pl-2 shadow shadow-md shadow-slate-800 cursor-pointer hover:bg-slate-800 border border-slate-800 hover:border-btnAccent"
            type="file"
            id="picture"
            name="picture"
            accept="image/*"
            required="true"
          />
          <input type="hidden" name="Position" value="1">
          <div class="flex items-end justify-end w-full h-1/2 md:h-1/3">
            <button
              type="submit"
              class="flex flex-row px-4 py-1 justify-between items-center gap-2 text-center md:font-semibold bg-btnPrimary hover:bg-hoverBtnPrimary text-btnPrimaryText w-auto h-auto rounded-xl shadow-md hover:shadow-none shadow-slate-800 transition duration-150 ease-in-out hover:border-btnAccent"
            >
              Submit<span class="spinner animate-spin h-6 w-6" id="spinner">
                <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="#bc690d">
                  <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                  <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
                  <g id="SVGRepo_iconCarrier">
                    <path d="M12 22C17.5228 22 22 17.5228 22 12H19C19 15.866 15.866 19 12 19V22Z" fill="#fff9d1"></path>
                    <path d="M2 12C2 6.47715 6.47715 2 12 2V5C8.13401 5 5 8.13401 5 12H2Z" fill="#fff9d1"></path>
                  </g>
                </svg>
              </span>
            </button>
          </div>
        </div>
      </div>
      <!-- /File upload -->
    </form>
    </section>
    }
}

/* Container for all buttons visible on the editor view.
These include 'Edit Title', 'Change Picture', 'Delete', 'Insert Work Above', 'Insert Work Below'.
To call these buttons use @EditorButton()
}
*/ 
templ ButtonsContainer(work models.WorkFrontEnd) {
    <div
        class="w-1/2 md:w-2/12 flex flex-col gap-y-2 ml-3 rounded-lg"
        id={ templ.JoinStringErrs("buttons-container-" + work.Position) }
    >
        @EditorButton("Edit", work)
        @EditorButton("InsertAbove", work)
        @EditorButton("InsertBelow", work)
        @EditorButton("Delete", work)
        <a
        class="gallery-link flex justify-center items-center h-14 dark:bg-btnPrimary bg-btnPrimary hover:text-btnAccent hover:border-btnAccent text-btnPrimaryText rounded-lg font-bold py-2 px-4 shadow-md shadow-slate-800 hover:shadow-none border border-2 border-gray-800 transition duration-150 ease-in-out"
        href={ templ.SafeURL("/editor/" + work.Title) }
        >
        Gallery
      </a>
    </div>
}


/*
Individual buttons of the container for the editor mode. Pass into it the component name and work data.
Example if you need the delete button: @EditorButton("Delete", work)
The button will have the correct redirects and hx-vals and methods to call in backend.
*/ 
templ EditorButton(component string, work models.WorkFrontEnd) {
    <button
        type="button"
        class="h-14 bg-btnPrimary dark:bg-btnPrimary hover:text-btnAccent hover:border-btnAccent text-btnPrimaryText rounded-lg font-bold py-2 px-4 shadow-md shadow-slate-800 hover:shadow-none border border-2 border-gray-800 transition duration-150 ease-in-out"
        hx-get="/editor/components"
        hx-target={ templ.JoinStringErrs("#buttons-container-" + work.Position) }
        hx-swap="outerHTML"
        hx-vals={ fmt.Sprintf(`{"Position": "%s", "Component": "%s", "Title": "%s", "Description": "%s"}`, work.Position, component, work.Title, work.Description) }
        >
        { TextForButton(component) }
      </button>
}

templ Delete(work models.WorkFrontEnd) {
  <div
  class="flex flex-col h-1/3 w-11/12 mx-4 md:w-1/2 gap-2 p-6 rounded-lg shadow-md bg-white dark:text-gray-800 md:items-start text-left justify-center"
  id={ templ.JoinStringErrs("delete-work-component-" + work.Position) }
>
  <h2 class="flex items-center gap-2 text-xl font-semibold leading-tight tracking-wide">
    <!-- The button is for closing this component and retreiving the previous one -->
    <button
      type="button"
      class="flex w-6 h-6 p-1 bg-transparent border-none outline-none cursor-pointer hover:bg-gray-200 justify-center items-center text-center"
      aria-label="Close"
      hx-headers='{"Content-Type": "application/json"}'
      hx-get="/editor/components"
      hx-vals={ fmt.Sprintf(`{"Position": "%s", "Component": "ButtonsEditor", "Title": "%s", "Description": "%s"}`, work.Position, work.Title, work.Description) }
      hx-target={ templ.JoinStringErrs("#delete-work-component-" + work.Position) } 
      hx-swap="outerHTML"
    >
      <!-- Add button text or icon here if needed -->
      <span class="text-red-500 hover:text-red-600">X</span>
      <!-- You can style this text as needed -->
    </button>
    DELETE WORK: { work.Title }
  </h2>
  <div class="flex flex-col justify-between t md:gap-3 mt-6 sm:flex-row items-center w-full text-left">
    <p class="px-6 py-2 rounded-md md:w-1/2 w-full text-center">---WARNING---</p>
    <button
      id="delete-button"
      type="submit"
      class="py-1 rounded-md md:w-1/6 w-1/4 bg-red-500 text-center hover:bg-red-800 border border-red-900"
      hx-post="/editor/del"
      hx-target="#works-section"
      hx-swap="outerHTML"
      hx-vals={ fmt.Sprintf(`{"Position": "%s"}`, work.Position) }
    >
      DELETE
    </button>
  </div>
</div>
}


templ DeleteView() {
  <div
    class="flex md:flex-col flex-col justify-start gap-3 md:gap-2 items-center h-full w-full rounded-md md:h-full"
    >
      <div class="flex flex-col gap-3 md:gap-2 rounded-md md:w-full w-full h-3/4 md:h-full align-text-top items-center md:items-end justify-end text-secondary flex-1">
        <div class=" flex items-center md:items-end justify-center w-full md:w-1/3 h-1/3 md:h-1/3 ">
          <div id="error-container" class="w-full h-full justify-center items-center">
        </div>
        <button
          type="submit"
          class="flex flex-row px-4 py-1 justify-between items-center gap-2 text-center md:font-semibold bg-btnPrimary hover:bg-red-500 text-btnPrimaryText w-auto h-auto  rounded-xl shadow-md hover:shadow-none shadow-slate-800 transition duration-150 ease-in-out hover:border-btnAccent"
          >
          Delete<span class="spinner animate-spin h-6 w-6" id="spinner">
          <svg viewBox="0 0 24 24"
          fill="none" xmlns="http://www.w3.org/2000/svg" stroke="#bc690d"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M12 22C17.5228 22 22 17.5228 22 12H19C19 15.866 15.866 19 12 19V22Z" fill="#fff9d1"></path> <path d="M2 12C2 6.47715 6.47715 2 12 2V5C8.13401 5 5 8.13401 5 12H2Z" fill="#fff9d1"></path> </g></svg>
          </span>
        </button>
        </div>
      </div>
  </div>
}

templ FileUploadView(operation string) {
<div
  class="flex md:flex-col flex-col justify-start gap-3 md:gap-2 items-center bg-primary h-full w-full rounded-md md:h-full"
  >
  <div class="flex justify-center items-center w-full h-1/4 md:h-1/5 sm:text-sm md:text-lg rounded-lg  bg-slate-800 shadow-sm shadow-slate-800 border border-slate-900">
    if operation == "Edit"{
    <p class="flex justify-center items-center h-full w-full text-center text-secondary font-medium">
      Change cover image
    </p>
    }
    if operation == "InsertAbove" || operation == "InsertBelow"{
      <p class="flex justify-center items-center h-full w-full text-center text-secondary font-medium">
      Choose an image  file below:
      </p>
    }
  </div>
    <div class="flex flex-col gap-3 md:gap-2 rounded-md md:w-full w-full h-3/4 md:h-2/3 align-text-top items-end justify-end text-secondary flex-1">
      <input
      class="text-center items-center justify-center w-full h-4/5 md:h-2/3 flex text-secondary rounded-lg bg-primary pt-2 pl-2 shadow shadow-md shadow-slate-800 cursor-pointer hover:bg-slate-800 border border-slate-800 hover:border-btnAccent"
      type="file"
      id="picture"
      name="picture"
      accept="image/*"
      if operation == "InsertAbove" || operation == "InsertBelow"{
        required="true"
      }
      />
      <div class=" flex items-end justify-end w-full h-1/2 md:h-1/3">
      <div id="error-container" class="w-full h-full justify-center items-center overflow-y-scroll no-scrollbar">
      </div>
      <button
      type="submit"
      class="flex flex-row px-4 py-1 justify-between items-center gap-2 text-center md:font-semibold bg-btnPrimary hover:bg-hoverBtnPrimary text-btnPrimaryText w-auto h-auto  rounded-xl shadow-md hover:shadow-none shadow-slate-800 transition duration-150 ease-in-out hover:border-btnAccent"
      >
      Submit<span class="spinner animate-spin h-6 w-6" id="spinner">
      <svg viewBox="0 0 24 24"
      fill="none" xmlns="http://www.w3.org/2000/svg" stroke="#bc690d"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M12 22C17.5228 22 22 17.5228 22 12H19C19 15.866 15.866 19 12 19V22Z" fill="#fff9d1"></path> <path d="M2 12C2 6.47715 6.47715 2 12 2V5C8.13401 5 5 8.13401 5 12H2Z" fill="#fff9d1"></path> </g></svg>
      </span>
      </button>
      </div>
    </div>
</div>
}

// Decide method to use base on the operation
func GetHxMethod(operation string) string{
  var method string
  if operation == "EditTitle"{
    method = `hx-put="/editor"`
  }
  if operation == "InsertAbove"{
    method = `hx-post="/editor"`
  }
  return method
}

// Generate <input> fields for edit, insert, or a <p> for delete. Used inside the ButtonView() component in the -Title input- area.
templ GetInputsOrMessage(operation string, title string) {
  if operation != "Delete"{
      <input
        class="w-full h-full sm:text-sm md:text-lg rounded-lg dark:text-gray-800 bg-primary text-center text-secondary hover:bg-slate-800 border-0 hover:border hover:border-btnAccent hover:shadow-md border-0 focus:ring-btnAccent focus:border-none"
        type="text"
        name="Title"
        id="title"
        if operation == "Edit"{
          value={ title }
        }
        if operation == "InsertAbove" || operation =="InsertBelow"{
          placeholder="Title"
        }
        required="true"
        name="Title"/>
        }

      if operation == "Delete"{
        <p class=" flex justify-center items-center bg-slate-800 h-full w-full rounded-md md:h-full text-center text-secondary border border-red-500">
        { title }
        </p>
      }
}

// Generate content for message displayed when in a specific operation: delete,insert,edit. Used inside the ButtonView() in the input title div.
templ TextAreaContent(operation string, description string) {
  if operation == "Edit"{
      <textarea
        class="rounded-md md:w-full w-full h-full align-text-top items-start justify-start bg-primary text-secondary resize-none pl-1 shadow shadow-md shadow-slate-800 hover:bg-slate-800 border border-slate-800 focus:ring-btnAccent focus:border-btnAccent hover:border-btnAccent"
        name="Description"
        required="true">
        { description }
      </textarea>
      }
      if operation == "InsertAbove" || operation == "InsertBelow"{
      <textarea
        class="rounded-md md:w-full w-full h-full align-text-top items-start justify-start bg-primary text-secondary resize-none pl-1 shadow shadow-md shadow-slate-800 hover:bg-slate-800 border border-slate-800 focus:ring-btnAccent focus:border-btnAccent hover:border-btnAccent"
        name="Description"
        placeholder="Enter work description here..."
        required="true">
      </textarea>
      }
      if operation == "Delete"{
        <p
        class="rounded-md md:w-full w-full h-full align-text-top items-start justify-start bg-primary text-secondary resize-none pl-1 shadow shadow-md shadow-slate-800 bg-slate-800 border border-red-500"
        name="Description">
        WARNING: This work will be permanently deleted and the gallery associated with it. If you do not wish to delete this work, press the 'X' to cancel and return.
        </p>
      }
}

// Text for button based on component called.
func TextForButton(component string) string{
  ComponentsButtonText := map[string]string{
  "Edit" : "Edit",
  "Delete": "Delete",
  "InsertAbove": "Insert Work Above",
  "InsertBelow": "Insert Work Below",
}
return ComponentsButtonText[component]
}

templ ButtonView(operation string, work models.WorkFrontEnd) {
  <div
  class="flex flex-col h-full md:h-2/3 w-11/12 mx-4 md:w-1/2 gap-2 p-6 rounded-lg shadow shadow-md shadow-slate-800 bg-primary dark:text-gray-800 md:items-start text-left justify-start mb-2"
  id={ templ.JoinStringErrs("insert-work-" + work.Position) }
>
  <!-- Go back-close -->
  <h2 class="flex items-center gap-2 text-xl font-semibold leading-tight tracking-wide text-secondary">
    <button
      type="button"
      class="flex w-6 h-6 p-1 bg-primary outline-none cursor-pointer rounded-full hover:bg-red-500 justify-center items-center text-center text-secondary"
      aria-label="Close"
      hx-headers='{"Content-Type": "application/json"}'
      hx-get="/editor/components"
      hx-vals={ fmt.Sprintf(`{"Position": "%s", "Component": "ButtonsEditor", "Title": "%s", "Description": "%s"}`, work.Position, work.Title, work.Description) }
      hx-target={ templ.JoinStringErrs("#insert-work-" + work.Position) } 
      hx-swap="outerHTML"
    >
      <span class="text-btnAccent hover:text-secondary">X</span>
    </button>
    { TextForButton(operation) }
  </h2>
  <!-- Form div -->
   <div
    class="flex md:flex-row flex-col justify-center items-center text-left bg-primary h-full w-full rounded-md"
  >
    <form
      id="form-container"
      class="flex md:flex-row flex-col justify-center text-left bg-primary h-full md:h-full w-full gap-4"
      if operation == "InsertAbove" || operation == "InsertBelow"{
        hx-post="/editor"
        hx-include="[name='Title'], [name='Position'], [name='Description']"
      }
      if operation == "Edit"{
        hx-put="/editor"
        hx-include="[name='Title'], [name='Position'], [name='Description']"
      }
      hx-encoding="multipart/form-data"
      hx-trigger="submit"
      hx-indicator="#spinner"
      hx-target="#error-container"
      hx-swap="innerHTML"
      if operation == "Delete"{
        hx-post="/editor/del"
        hx-vals={ fmt.Sprintf(`{"Position": "%s"}`, work.Position) }
        hx-confirm="Are you sure you want to delete?"
      }>
      <!-- Title input -->
      <div class="flex md:flex-col flex-col justify-end gap-2 items-center bg-primary h-full w-full rounded-md md:h-full flex">
        <div class="flex justify-center items-center border border-slate-800 w-full h-1/4 md:h-1/3 md:h-1/5 sm:text-sm md:text-lg rounded-lg dark:text-gray-800 bg-primary text-center shadow shadow-md shadow-slate-800">
          <!-- Generate <input> for 'Edit','Insert' or <p> message for 'Delete'-->
          @GetInputsOrMessage(operation, work.Title)
        </div>

        <div class="rounded-md md:w-full border-slate-800 w-full h-5/6 md:h-4/5 align-text-top items-start justify-start bg-primary text-black flex-1 resize-none shadow-sm shadow-slate-800 hover:bg-slate-800">
          <!-- Generate <text area> or <p> with message depending on operation-->
          @TextAreaContent(operation, work.Description)
          if work.PositionBelow != ""{
          <input type="hidden" name="Position" value={ work.PositionBelow }>
          }else{<input type="hidden" name="Position" value={ work.Position }>}
        </div>

      </div>
      <!-- /Title Input -->
      <!-- File upload  -->
      if operation == "Delete"{
        @DeleteView()
      }else{
        @FileUploadView(operation)
      }
      <!-- /File upload -->
    </form>
  </div>
  <!-- /Form div -->
</div>
}
